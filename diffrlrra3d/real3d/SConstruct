from rsf.proj import *
from rsf.recipes.beg import server
from rsf.recipes.tpx import FPX
from rsf.prog import RSFROOT
import math
import velcon3d

def Grey(data,other):
	Result(data,
       '''
       byte gainpanel=all clip=82 |
       grey3 title=Stack flat=n
       frame1=180 frame2=214 frame3=200  flat=n point1=.6 point2=.7 %s
       '''%other)
def Greyb(data,other):
	Result(data,
       '''
       put label1=Time label2=Inline label3=Crossline unit1=s unit2=km unit3=km |
       byte gainpanel=all clip=50 |
       grey3 title=Stack flat=n 
       frame1=180 frame2=100 frame3=60  flat=n point1=.6 point2=.7 %s
       '''%other)
    
def Greynb(data,other):
	Result(data,
       '''
       put label1=Time label2=Inline label3=Crossline unit1=s unit2=km unit3=km |
       byte gainpanel=all clip=10 |
       grey3 title=Stack flat=n
       frame1=180 frame2=100 frame3=60  flat=n point1=.6 point2=.7 %s
       '''%other)

dist = 4.3

cube='stack.rsf'
dcube='dif.rsf'
#dcube2='dif2.rsf'
rcube='ref.rsf'
tdata='tdata.rsf'
databin='data.bin'
dataasc='data.asc'


# cube='stack.rsf'
# dcube='b-lrra-n.rsf'
#dcube2='dif2.rsf'
# rcube='b-lrra.rsf'

# downloading the data

# segy = os.getenv('HOME')+'/DATA_diffr/snt_barrolka_raw_unmigrated_stk_21_11_2013.segy'
segy='snt_barrolka_raw_unmigrated_stk_21_11_2013.segy'
Fetch(segy,'barrolka',server)

Flow('data tdata data.asc data.bin',segy,
     '''
     segyread tfile=${TARGETS[1]} hfile=${TARGETS[2]} bfile=${TARGETS[3]}
     ''')

# Inline data range 2000-2687.  Inlines traverse NW-->SE.                  
# Xline data range 9997-10414.  Xlines  traverse SW-->NE.                   
# Bin size 25 x 25 m
# windowing out data between 1-2s, which is the most interesting region for diffractions
# double checking the above information
# binning the data into 3D array

Flow('stack','data',
     '''
     intbin xk=iline yk=xline | pow pow1=2 |
     window min1=1 max1=2|
     put 
     label2=Inline    o2=0 d2=0.025 unit2=km 
     label3=Crossline o3=0 d3=0.025 unit3=km |
     window n1=250 n2=650 n3=400
     ''')

Flow('b','stack','window n1=250 n2=650 n3=400 --out=stdout')
# Grey('b','')
########################################################################
# INITIALIZATION
########################################################################
matlab         = WhereIs('matlab')
matROOT = '../matfun/'
matfun = 'LDRR'
matlabpath = os.environ.get('MATLABPATH',os.path.join(RSFROOT,'lib'))

if not matlab:
    sys.stderr.write('\nCannot find Matlab.\n')
    sys.exit(1)

# n1=251
# n2=688
# n3=418
n1=250
n2=650
n3=400
d1=0.004
d2=0.025
d3=0.025
o1=1
o2=0
o3=0
lf=0
hf=120
verb=1

n1win=50
n2win=50
n3win=50
r1=0.5
r2=0.5
r3=0.5

put='n1=%d n2=%d n3=%d d1=%g d2=%g d3=%g o1=%g o2=%g o3=%g'%(n1,n2,n3,d1,d2,d3,o1,o2,o3)

N=4
N2=20
NN=3
ifdamp=0
############################################################
## with parameter
############################################################
Flow('b-lrr0 b-lrra0',[os.path.join(matROOT,matfun+'.m'),'b'],
      '''MATLABPATH=%(matlabpath)s %(matlab)s 
      -nosplash -nojvm -r "addpath %(matROOT)s;%(matfun)s('${SOURCES[1]}','${TARGETS[0]}','${TARGETS[1]}',%(n1)d,%(n2)d,%(n3)d,%(d1)g,%(lf)g,%(hf)g,%(N)d,%(N2)d,%(NN)d,%(n1win)d,%(n2win)d,%(n3win)d,%(r1)g,%(r2)g,%(r3)g,%(ifdamp)d,%(verb)d);quit"
      '''%vars(),stdin=0,stdout=-1)
Flow('b-lr','b-lrr','cp --out=stdout')
Flow('b-lrr','b-lrr0','put %s --out=stdout'%put)
Flow('b-lrra','b-lrra0','put %s --out=stdout'%put)
Flow('b-lrr-n','b b-lrr','add scale=1,-1 ${SOURCES[1]}')
Flow('b-lrra-n','b b-lrra','add scale=1,-1 ${SOURCES[1]}')
Flow('b-lr-n','b b-lr','add scale=1,-1 ${SOURCES[1]}')


Flow('b-pwd','ref','window n1=250 n2=650 n3=400 --out=stdout')
Flow('b-pwd-n','b b-pwd','add scale=1,-1 ${SOURCES[1]}')

####

Flow('dip','stack','fdip rect1=60 rect2=30 rect3=30 order=2 verb=y')

Flow('ref','stack dip','pwspray2 ns2=4 ns3=4 dip=${SOURCES[1]} order=4 | stack axis=2')

#print 'packed ref.rsf and dif.rsf files are available in the datapath dir'

#Result('ref',
#       '''
#       byte gainpanel=all clip=82 |
#       grey3 title=Reflections
#       frame1=180 frame2=214 frame3=200  flat=n point1=.6 point2=.7
#       ''')

#########################################################################################################

# uncomment to make reproducible
Flow('dif','stack ref','add scale=1,-1 ${SOURCES[1]}')

# use backups
#Flow('dif','/data01/merzlikind/backup_rsf_files/barrolka.3d.iso/packed/dif_packed.rsf','math output="input"')

#Flow('ref','/data01/merzlikind/backup_rsf_files/barrolka.3d.iso/packed/ref_packed.rsf','math output="input"')
"""
Result('dif',
       '''
       byte gainpanel=all clip=35 |
       grey3 title=Diffractions flat=n
       frame1=180 frame2=214 frame3=200 flat=n point1=.6 point2=.7
       ''')
"""

# slices

Result('dif_slice',dcube,
                     '''
                     window n1=1 min1=1.72 |
                     transp plane=12 |
                     grey yreverse=n gainpanel=each pclip=100 wanttitle=n
                     ''')
Result('ref_slice',cube,
                     '''
                     window n1=1 min1=1.72 |
                     transp plane=12 |
                     grey yreverse=n gainpanel=each pclip=100 wanttitle=n
                     ''')
# downloading velocity

velsegy = 'snt_barrolka_rms_migration_vels_proc_datum_29_02_2012.segy'
Fetch(velsegy,'barrolka',server)

Flow('vdata vtdata vdata.asc vdata.bin',velsegy,
     '''
     segyread tfile=${TARGETS[1]} hfile=${TARGETS[2]} bfile=${TARGETS[3]}
     ''')

# bin velocity file and convert from [m/s] to [km/s]

Flow('vtravelt','vdata',
     '''
     intbin xk=iline yk=xline |
     math output="input/1000" |
     put 
     label2=Inline    o2=0 d2=0.025 unit2=km 
     label3=Crossline o3=0 d3=0.025 unit3=km 
     ''')

#<vtravelt.rsf sfwindow n3=1 min3=5.375 | sfgrey color=j scalebar=y mean=y allpos=y minval=2.5 maxval=3.5 min1=1.0 max1=2.0 | sfpen &
#n2=1 min2=3.925
# some plotting functions

nt = 251
units = 'km'
def grey2(title):
        return '''
        grey title="%s" pclip=100 gainpanel=each
        label1=Time unit1=s label2=Distance unit2="%s"
        titlefat=3 labelfat=3 font=2
        ''' % (title,units)

def velgrey2(title):
        return grey2(title) + '''
        color=j scalebar=y bias=%g barlabel=Velocity barunit="%s/s"
        barreverse=y minval=1.0 maxval=4.0
        ''' % (1.5,units)

# Velocity Continuation

nv=100
dv=0.004
v0=2.9
eps=0.0000000000001

Flow('fft',dcube,'costaper nw1=50 nw2=15 nw3=15 | t2warp | fft1 | fft3 axis=2 | fft3 axis=3')

Flow('rfft',rcube,'costaper nw1=50 nw2=15 nw3=15 | t2warp | fft1 | fft3 axis=2 | fft3 axis=3')

Flow('sfft',cube,'costaper nw1=50 nw2=15 nw3=15 | t2warp | fft1 | fft3 axis=2 | fft3 axis=3')

# diffractions and noise

difcubes=[]

velcon3d.vc3d('fft','all','vc',difcubes,v0,nv,dv,eps)

# full waveform

scubes=[]

velcon3d.vc3d('sfft','sall','svc',scubes,v0,nv,dv,eps)

# reflection only data

cubes_refl=[]

velcon3d.vc3d('rfft','all-refl','vc-refl',cubes_refl,v0,nv,dv,eps)

# wide velocity range

cubes_wr=[]

velcon3d.vc3d('fft','all_wr','vc_wr',cubes_wr,1.5,100,0.04,eps)

# path integrals for wide range

Flow('erfi_input','fft','math output="1.0 + I*0.0"')

velcon3d.pi3d(eps,'erfi_input','fft','wrong',1.5,4.5)
velcon3d.dpi3d(eps,'erfi_input','fft','wrong',1.5,4.5)

# Gaussian weigthing scheme

v_a=2.9 
v_b=3.3

weps=0.01
wv_a= v_a
wv_b= v_b
wv0 = 3.1#2.0#3.1#2.0#2.0#v0+0.5
beta = 10

alpha = '(-1)*((x2+%g)*(x2+%g) + (x3+%g)*(x3+%g))*%g/(16*(x1+%g))'%(weps,weps,weps,weps,2*math.pi,weps)
root = 'sqrt(abs(I*%s-%g))*exp(I*arg(I*%s-%g)/2)'%(alpha,beta,alpha,beta) 
# stable but wrong
#wconst = 'sqrt(%g)*(exp((-1)*%g*%g*%g)*exp(((-1)*%g*%g*%g)/(I*%s-%g)))/(2*%s)'%(math.pi,beta,wv0,wv0,beta,beta,wv0,alpha,beta,root)
# unstable but correct?
#wconst = 'sqrt(%g)*(exp((-1)*%g*%g*%g)*exp(((-1)*%g*%g*%g*%g)/(I*%s-%g)))/(2*%s)'%(math.pi,beta,wv0,wv0,beta,beta,wv0,wv0,alpha,beta,root)
wconst = 'sqrt(%g)*(exp((-1)*%g*%g*%g))/(2*%s)'%(math.pi,beta,wv0,wv0,root)

u = '%s*%g+(%g*%g)/(%s)'%(root,wv_b,beta,wv0,root)
u_a = '%s*%g+(%g*%g)/(%s)'%(root,wv_a,beta,wv0,root)

#werfi_b = '''
#         sfmath output="input*I*%s" |
#         cerf | sfmath output="input*I" | sfmath output="(-1)*input*%s"
#         '''%(u,wconst)

werfi_b = '''
         sfmath output="input*I*%s" |
         cerf | sfmath output="input*(-I)"
         '''%(u)

#werfi_a = '''
#         sfmath output="input*I*%s" |
#         cerf | sfmath output="input*I" | sfmath output="(-1)*input*%s"
#         '''%(u_a,wconst)

werfi_a = '''
         sfmath output="input*I*%s" |
         cerf | sfmath output="input*(-I)"
         '''%(u_a)

check = '''
         sfmath output="input*I*%s" |
         cerf | sfmath output="input*(-1)*I"
         '''%(u)

Flow('werfi_b','erfi_input',werfi_b)

Flow('werfi_a','erfi_input',werfi_a)

Flow('wconst','erfi_input','math output="input*%s"'%wconst)

Flow('werfi_ba','werfi_b werfi_a','add scale=1,-1 ${SOURCES[1]}')

Flow('wpi_fft_werfiba','fft werfi_ba wconst',
	'''
	math  K=${SOURCES[1]} output="input*K" |
	math  K=${SOURCES[2]} output="input*K" |
	math output="input*exp( ((-1)*%g*%g*%g*%g)/(I*%s-%g) )"
	'''%(beta,beta,wv0,wv0,alpha,beta))

Flow('pi_gaussian','wpi_fft_werfiba',
                  '''
                  fft3 axis=3 inv=y |
                  fft3 axis=2 inv=y |
                  fft1 inv=y |
                  t2warp inv=y
                  ''')

# check gaussian through stacking of vc steps

#Flow('gpi_check','all','math output="input*exp(-10*(x4-3.1)^2)" | stack axis=4')
Flow('gpi_check_wr','all_wr','math output="input*exp(-10*(x2-3.1)^2)" | stack axis=2')

Flow('gpi3dzo_check','fft','gpi3dzo v_a=2.9 v_b=3.3 v_0=3.1 beta=10')
Flow('gpi3dzo','gpi3dzo_check',
                  '''
                  fft3 axis=3 inv=y |
                  fft3 axis=2 inv=y |
                  fft1 inv=y |
                  t2warp inv=y
                  ''')

# 3D PI precompute

eps_4pi=0.0001

const = '((-1)*sqrt(2*(x1+%g))*exp(I*0.25*%g)/( sqrt((x2+%g)*(x2+%g) + (x3+%g)*(x3+%g)) ))'%(eps_4pi,math.pi,eps_4pi,eps_4pi,eps_4pi,eps_4pi)

erfi_a = '''
         sfmath output="input*I*exp(I*0.75*%g)*%g*sqrt( 2*%g*((x2+%g)*(x2+%g)  +  (x3+%g)*(x3+%g)) )/(4*(sqrt(x1+%g)))" |
         cerf | sfmath output="input*(-1)*I" | sfmath output="input*%s"
         '''%(math.pi,v_a,math.pi,eps_4pi,eps_4pi,eps_4pi,eps_4pi,eps_4pi,const)

erfi_b = '''
         sfmath output="input*I*exp(I*0.75*%g)*%g*sqrt( 2*%g*((x2+%g)*(x2+%g)  +  (x3+%g)*(x3+%g)) )/(4*(sqrt(x1+%g)))" |
         cerf | sfmath output="input*(-1)*I" | sfmath output="input*%s"
         '''%(math.pi,v_b,math.pi,eps_4pi,eps_4pi,eps_4pi,eps_4pi,eps_4pi,const)

Flow('erfi_a','erfi_input',erfi_a)
Flow('erfi_b','erfi_input',erfi_b)

Flow('erfi_ba','erfi_b erfi_a','add scale=1,-1 ${SOURCES[1]}')

Flow('pi_erfi_fft','fft erfi_ba','math  K=${SOURCES[1]} output="input*K"')

Flow('pi_erfi','pi_erfi_fft',
                  '''
                  fft3 axis=3 inv=y |
                  fft3 axis=2 inv=y |
                  fft1 inv=y |
                  t2warp inv=y
                  ''')

# Double path integral

eps_d=eps_4pi

k_sqr_sum = '((x2+%g)*(x2+%g) + (x3+%g)*(x3+%g))'%(eps_d,eps_d,eps_d,eps_d)

shiftdpi_b='''
           sfmath output="input*I*4*(x1+%g)*exp(-I*%g*%g*%s*%g/( 16*(x1+%g) ) )/(%s*%g)"
           '''%(eps_d,v_b,v_b,k_sqr_sum,2*math.pi,eps_d,k_sqr_sum,math.pi)
shiftdpi_a='''
           sfmath output="input*I*4*(x1+%g)*exp(-I*%g*%g*%s*%g/( 16*(x1+%g) ) )/(%s*%g)"
           '''%(eps_d,v_a,v_a,k_sqr_sum,2*math.pi,eps_d,k_sqr_sum,math.pi)

Flow('dpi_a','erfi_input',shiftdpi_a)
Flow('dpi_b','erfi_input',shiftdpi_b)
Flow('dpi','dpi_b dpi_a','add scale=1,-1 ${SOURCES[1]}')
Flow('dpi_fft_precomp','fft dpi','math  K=${SOURCES[1]} output="input*K"')#fft

Flow('dpi_4o_precomp','dpi_fft_precomp',
                  '''
                  fft3 axis=3 inv=y |
                  fft3 axis=2 inv=y |
                  fft1 inv=y |
                  t2warp inv=y
                  ''')
#Result('dpi_4o_precomp','grey gainpanel=each pclip=100 scalebar=y title="dpi_4o_precomp eps1=%g"'%(eps_d))

# Velocity estimation

drect1=15#15
drect2=35#15
drect3=35#15

Flow('vel','dpi_4o_precomp pi_erfi','divn den=${SOURCES[1]} rect1=%d rect2=%d rect3=%d'%(drect1,drect2,drect3))
Flow('vel_wr','dpi_4_wrong pi_4_wrong','divn den=${SOURCES[1]} rect1=%d rect2=%d rect3=%d'%(drect1,drect2,drect3))

memsize=10000

### Velocity clipping

Flow('vel_tr','vel','clip2 lower=1.54 value=1.54')
Flow('vel_wr_tr','vel_wr','clip2 lower=1.54 value=1.54')

Flow('dpi_vel_slice','all vel_tr',
     'slice pick=${SOURCES[1]} | window')

Flow('dpi_wr_vel_slice','all_wr vel_wr_tr',
     'slice pick=${SOURCES[1]} | window')

Flow('dpi-vel-slice-refl','all-refl vel_tr',
     'slice pick=${SOURCES[1]} | window')

# make sure that dimensions in sfslice are similar
Flow('vel_snt_cl','vtravelt','clip2 lower=2.91 value=2.91 | window min1=1.0 max1=2.0')

Flow('snt_dpi_vel_slice','all vel_snt_cl',
     'slice pick=${SOURCES[1]} | window')

# Reflections and diffractions - Full Waveform Image

Flow('sdpi_vel_slice','sall vel_tr',
     'slice pick=${SOURCES[1]} | window')

# Target horizon slices

#Fetch('PC35Sand_PhaseRot90.ilclt','barrolka',server)

# Sliced through VC volume - velocity from Double Path Integral

Flow('dpi_ts','dpi_vel_slice horizon-slice','inttest1 coord=${SOURCES[1]} nw=4 interp=spline | window')

Result('dpi-ts','dpi_ts','grey wanttitle=n transp=n yreverse=n screenratio=0.6')

# Raw Not Migrated Diffractions

Flow('notmig_ts',[ dcube,'horizon-slice'],'inttest1 coord=${SOURCES[1]} nw=4 interp=spline | window')

#Result('notmig_ts','grey title="Raw Diffr Horizon Slice" transp=n yreverse=n')

# Regular Path Integral

Flow('pathint_ts',[ 'pi_erfi','horizon-slice'],'inttest1 coord=${SOURCES[1]} nw=4 interp=spline | window')

#Result('pathint_ts','grey title="Regular Path-Integal Slice" transp=n yreverse=n')

Flow('pi_4_wrong_ts',[ 'pi_4_wrong','horizon-slice'],'inttest1 coord=${SOURCES[1]} nw=4 interp=spline | window')

#Result('pi_4_wrong_ts','grey title="Regular Path-Integal Slice" transp=n yreverse=n')

# Gaussian Path Integral

Flow('gaussian_ts',[ 'pi_gaussian','horizon-slice'],'inttest1 coord=${SOURCES[1]} nw=4 interp=spline | window')

#Result('gaussian_ts','grey title="Gaussian Slice" transp=n yreverse=n')

# GPI prog
Flow('gpi3dzo_ts',[ 'gpi3dzo','horizon-slice'],'inttest1 coord=${SOURCES[1]} nw=4 interp=spline | window')

#Result('gpi3dzo_ts','grey title="Gaussian Slice Check" transp=n yreverse=n')

# Conventional Full Wavefrom Image - Sliced through VC volume - velocity from Double Path Integral

Flow('conv_image_ts',[ 'sdpi_vel_slice','horizon-slice'],'inttest1 coord=${SOURCES[1]} nw=4 interp=spline | window')

Result('conv-image-ts','conv_image_ts','grey wanttitle=n transp=n yreverse=n screenratio=0.6')

# Reflection only slice

Flow('refl-image-ts',[ 'dpi-vel-slice-refl','horizon-slice'],'inttest1 coord=${SOURCES[1]} nw=4 interp=spline | window')

Result('refl-image-ts','refl-image-ts','grey wanttitle=n transp=n yreverse=n screenratio=0.6')

# Stack

Flow('stack_ts',[ cube,'horizon-slice'],'inttest1 coord=${SOURCES[1]} nw=4 interp=spline | window')

Result('stack_ts','grey title="Stack Horizon Slice" transp=n yreverse=n')

### Pictures

Result('stack-cube','stack',
       '''
       byte gainpanel=all clip=82 |
       grey3 title=Stack flat=n
       frame1=180 frame2=214 frame3=200  flat=n point1=.6 point2=.7
       ''')

Result('dif-cube','dif',
       '''
       byte gainpanel=all clip=25 |
       grey3 title=Diffractions flat=n
       frame1=180 frame2=214 frame3=200  flat=n point1=.6 point2=.7
       ''')

Flow('snt_dpi_ts','snt_dpi_vel_slice horizon-slice','inttest1 coord=${SOURCES[1]} nw=4 interp=spline | window')

Flow('dpi_4_wrong_ts',[ 'dpi_wr_vel_slice','horizon-slice'],'inttest1 coord=${SOURCES[1]} nw=4 interp=spline | window')

Flow('gpi_4_wrong_ts',[ 'gpi_check_wr','horizon-slice'],'inttest1 coord=${SOURCES[1]} nw=4 interp=spline | window')

Result('w-snt-dpi-ts','snt_dpi_ts','window min1=6.0 max1=12.0 min2=0.5 max2=4.5 | grey wanttitle=n transp=n yreverse=n screenratio=0.6')
Result('w-pathint-ts','pathint_ts','window min1=6.0 max1=12.0 min2=0.5 max2=4.5 | grey wanttitle=n transp=n yreverse=n screenratio=0.6')
Result('w-dpi-ts','dpi_ts','window min1=6.0 max1=12.0 min2=0.5 max2=4.5 | grey wanttitle=n transp=n yreverse=n screenratio=0.6')
Result('w-dpi-wr-ts','dpi_4_wrong_ts','window min1=6.0 max1=12.0 min2=0.5 max2=4.5 | grey wanttitle=n transp=n yreverse=n screenratio=0.6')
Result('w-pi-wr-ts','pi_4_wrong_ts','window min1=6.0 max1=12.0 min2=0.5 max2=4.5 | grey wanttitle=n transp=n yreverse=n screenratio=0.6')
Result('w-gpi-wr-ts','gpi_4_wrong_ts','window min1=6.0 max1=12.0 min2=0.5 max2=4.5 | grey wanttitle=n transp=n yreverse=n screenratio=0.6')

Flow('vel_hts','vel.rsf horizon-slice','inttest1 coord=${SOURCES[1]} nw=4 interp=spline | window')

Result('vel-hts-sing','vel_hts','grey color=j barlabel=Velocity barunit=km/s allpos=n scalebar=y mean=n clip=0.02 bias=3.1 minval=3.08 maxval=3.11 bar=bar.rsf wanttitle=n transp=n yreverse=n screenratio=0.6')



###generate horizon-slice (shared)
Flow('horizon','PC35Sand_PhaseRot90.ilclt','echo n1=3 n2=283965 data_format=ascii_float in=$SOURCE | dd form=native',stdin=0)
Flow('head','horizon','window n1=2 | dd type=int')
Flow('horizon2 mask','horizon head',
     '''
     window n1=1 f1=2 squeeze=n | intbin head=${SOURCES[1]} mask=${TARGETS[1]} xkey=0 ykey=1 | window | scale dscale=0.001
     ''')
Flow('horizon-fill','horizon2 mask','lapfill mask=${SOURCES[1]} grad=y verb=y')
Flow('horizon-slice','horizon-fill','spray axis=1 n=1')

### Imaging for LRR
#generate dpi_vel_slice
dcube='b-lrr-n'
Flow('lr-fft',dcube,'costaper nw1=50 nw2=15 nw3=15 | t2warp | fft1 | fft3 axis=2 | fft3 axis=3')
difcubes=[]
velcon3d.vc3d('lr-fft','lr-all','lr-vc',difcubes,v0,nv,dv,eps)
Flow('lr-erfi_input','lr-fft','math output="1.0 + I*0.0"')
# 3D PI precompute
Flow('lr-erfi_a','lr-erfi_input',erfi_a)
Flow('lr-erfi_b','lr-erfi_input',erfi_b)
Flow('lr-erfi_ba','lr-erfi_b lr-erfi_a','add scale=1,-1 ${SOURCES[1]}')
Flow('lr-pi_erfi_fft','lr-fft lr-erfi_ba','math  K=${SOURCES[1]} output="input*K"')
Flow('lr-pi_erfi','lr-pi_erfi_fft','fft3 axis=3 inv=y |fft3 axis=2 inv=y |fft1 inv=y |t2warp inv=y')
# Double path integral
Flow('lr-dpi_a','lr-erfi_input',shiftdpi_a)
Flow('lr-dpi_b','lr-erfi_input',shiftdpi_b)
Flow('lr-dpi','lr-dpi_b lr-dpi_a','add scale=1,-1 ${SOURCES[1]}')
Flow('lr-dpi_fft_precomp','lr-fft lr-dpi','math  K=${SOURCES[1]} output="input*K"')#fft
Flow('lr-dpi_4o_precomp','lr-dpi_fft_precomp','fft3 axis=3 inv=y |fft3 axis=2 inv=y |fft1 inv=y |t2warp inv=y')
Flow('lr-vel','lr-dpi_4o_precomp lr-pi_erfi','divn den=${SOURCES[1]} rect1=%d rect2=%d rect3=%d'%(drect1,drect2,drect3))
Flow('lr-vel_tr','lr-vel','clip2 lower=1.54 value=1.54')
Flow('lr-dpi_vel_slice','lr-all lr-vel_tr',
     'slice pick=${SOURCES[1]} | window')

# Sliced through VC volume - velocity from Double Path Integral
Flow('lr-dpi_ts','lr-dpi_vel_slice horizon-slice','inttest1 coord=${SOURCES[1]} nw=4 interp=spline | window')
Result('lr-dpi-ts','lr-dpi_ts','grey wanttitle=n transp=n yreverse=n screenratio=0.6')


### Imaging for LRRA
#generate dpi_vel_slice
dcube='b-lrra-n'
Flow('lra-fft',dcube,'costaper nw1=50 nw2=15 nw3=15 | t2warp | fft1 | fft3 axis=2 | fft3 axis=3')
difcubes=[]
velcon3d.vc3d('lra-fft','lra-all','lra-vc',difcubes,v0,nv,dv,eps)
Flow('lra-erfi_input','lra-fft','math output="1.0 + I*0.0"')
# 3D PI precompute
Flow('lra-erfi_a','lra-erfi_input',erfi_a)
Flow('lra-erfi_b','lra-erfi_input',erfi_b)
Flow('lra-erfi_ba','lra-erfi_b lra-erfi_a','add scale=1,-1 ${SOURCES[1]}')
Flow('lra-pi_erfi_fft','lra-fft lra-erfi_ba','math  K=${SOURCES[1]} output="input*K"')
Flow('lra-pi_erfi','lra-pi_erfi_fft','fft3 axis=3 inv=y |fft3 axis=2 inv=y |fft1 inv=y |t2warp inv=y')
# Double path integral
Flow('lra-dpi_a','lra-erfi_input',shiftdpi_a)
Flow('lra-dpi_b','lra-erfi_input',shiftdpi_b)
Flow('lra-dpi','lra-dpi_b lra-dpi_a','add scale=1,-1 ${SOURCES[1]}')
Flow('lra-dpi_fft_precomp','lra-fft lra-dpi','math  K=${SOURCES[1]} output="input*K"')#fft
Flow('lra-dpi_4o_precomp','lra-dpi_fft_precomp','fft3 axis=3 inv=y |fft3 axis=2 inv=y |fft1 inv=y |t2warp inv=y')
Flow('lra-vel','lra-dpi_4o_precomp lra-pi_erfi','divn den=${SOURCES[1]} rect1=%d rect2=%d rect3=%d'%(drect1,drect2,drect3))
Flow('lra-vel_tr','lra-vel','clip2 lower=1.54 value=1.54')
Flow('lra-dpi_vel_slice','lra-all lra-vel_tr',
     'slice pick=${SOURCES[1]} | window')

# Sliced through VC volume - velocity from Double Path Integral
Flow('lra-dpi_ts','lra-dpi_vel_slice horizon-slice','inttest1 coord=${SOURCES[1]} nw=4 interp=spline | window')
Result('lra-dpi-ts','lra-dpi_ts','grey wanttitle=n transp=n yreverse=n screenratio=0.6')


### Imaging for PWD
#generate dpi_vel_slice
dcube='b-pwd-n'
Flow('pwd-fft',dcube,'costaper nw1=50 nw2=15 nw3=15 | t2warp | fft1 | fft3 axis=2 | fft3 axis=3')
difcubes=[]
velcon3d.vc3d('pwd-fft','pwd-all','pwd-vc',difcubes,v0,nv,dv,eps)
Flow('pwd-erfi_input','pwd-fft','math output="1.0 + I*0.0"')
# 3D PI precompute
Flow('pwd-erfi_a','pwd-erfi_input',erfi_a)
Flow('pwd-erfi_b','pwd-erfi_input',erfi_b)
Flow('pwd-erfi_ba','pwd-erfi_b pwd-erfi_a','add scale=1,-1 ${SOURCES[1]}')
Flow('pwd-pi_erfi_fft','pwd-fft pwd-erfi_ba','math  K=${SOURCES[1]} output="input*K"')
Flow('pwd-pi_erfi','pwd-pi_erfi_fft','fft3 axis=3 inv=y |fft3 axis=2 inv=y |fft1 inv=y |t2warp inv=y')
# Double path integral
Flow('pwd-dpi_a','pwd-erfi_input',shiftdpi_a)
Flow('pwd-dpi_b','pwd-erfi_input',shiftdpi_b)
Flow('pwd-dpi','pwd-dpi_b pwd-dpi_a','add scale=1,-1 ${SOURCES[1]}')
Flow('pwd-dpi_fft_precomp','pwd-fft pwd-dpi','math  K=${SOURCES[1]} output="input*K"')#fft
Flow('pwd-dpi_4o_precomp','pwd-dpi_fft_precomp','fft3 axis=3 inv=y |fft3 axis=2 inv=y |fft1 inv=y |t2warp inv=y')
Flow('pwd-vel','pwd-dpi_4o_precomp pwd-pi_erfi','divn den=${SOURCES[1]} rect1=%d rect2=%d rect3=%d'%(drect1,drect2,drect3))
Flow('pwd-vel_tr','pwd-vel','clip2 lower=1.54 value=1.54')
Flow('pwd-dpi_vel_slice','pwd-all pwd-vel_tr',
     'slice pick=${SOURCES[1]} | window')

# Sliced through VC volume - velocity from Double Path Integral
Flow('pwd-dpi_ts','pwd-dpi_vel_slice horizon-slice','inttest1 coord=${SOURCES[1]} nw=4 interp=spline | window')
Result('pwd-dpi-ts','pwd-dpi_ts','grey wanttitle=n transp=n yreverse=n screenratio=0.6')



Flow('b-pwd-rimag','refl-image-ts','cp')
Flow('b-pwd-imag','pwd-dpi_ts','cp')
Flow('b-lrr-imag','lr-dpi_ts','cp')
Flow('b-lrra-imag','lra-dpi_ts','cp')


Greyb('b','title="3D field data"')
Greyb('b-lrr','title="LRR"')
Greyb('b-lrra','title="LRRA"')
Greyb('b-pwd','title="PWD"')
Greynb('b-lrr-n','title=LRR')
Greynb('b-lrra-n','title=LRRA')
Greynb('b-pwd-n','title=PWD')


Flow('b-pwd-n-t','b-pwd-n','window n1=1 f1=180')
Flow('b-lrr-n-t','b-lrr-n','window n1=1 f1=180')
Flow('b-lrra-n-t','b-lrra-n','window n1=1 f1=180')

Result('b-pwd-n-t','b-pwd-n-t','grey wanttitle=y transp=n yreverse=n screenratio=0.6 title="PWD" wherexlabel=b wheretitle=t')
Result('b-lrr-n-t','b-lrr-n-t','grey wanttitle=y transp=n yreverse=n screenratio=0.6 title="LRR" wherexlabel=b wheretitle=t')
Result('b-lrra-n-t','b-lrra-n-t','grey wanttitle=y transp=n yreverse=n screenratio=0.6 title="LRRA" wherexlabel=b wheretitle=t')


#imag
Result('b-pwd-rimag','b-pwd-rimag','grey wanttitle=y transp=n yreverse=n screenratio=0.6 title="Reflection image" wherexlabel=b wheretitle=t')
Result('b-pwd-imag','b-pwd-imag','grey wanttitle=y transp=n yreverse=n screenratio=0.6 title="PWD" wherexlabel=b wheretitle=t')
Result('b-lrr-imag','b-lrr-imag','grey wanttitle=y transp=n yreverse=n screenratio=0.6 title="LRR" wherexlabel=b wheretitle=t ')
Result('b-lrra-imag','b-lrra-imag','grey wanttitle=y transp=n yreverse=n screenratio=0.6 title="LRRA" wherexlabel=b wheretitle=t')

#add labels
Plot('lb1',None,
	'''
	box x0=3.2 y0=6.2 label="" xt=1 yt=0.5 length=0.5 
	''')
Plot('lb2',None,
	'''
	box x0=4.7 y0=7.5 label="" xt=1 yt=0.5 length=0.5 
	''')
Plot('lb3',None,
	'''
	box x0=3.7 y0=6.5 label="Crossline-coherent Reflection" xt=2 yt=1 length=4 
	''')

Plot('lb11',None,
	'''
	box x0=3.2 y0=6.2 label="" xt=1 yt=0.5 length=0.5 
	''')
Plot('lb22',None,
	'''
	box x0=4.7 y0=7.5 label="" xt=1 yt=0.5 length=0.5 
	''')
Plot('lb33',None,
	'''
	box x0=3.7 y0=6.5 label="" xt=2 yt=1 length=0.5 
	''')
	
Plot('lbb4',None,
	'''
	box x0=4.9 y0=7.2 label="" xt=1 yt=0.5 length=0.5 
	''')
Plot('lbb5',None,
	'''
	box x0=4.7 y0=6.5 label="" xt=1 yt=0.5 length=0.5 
	''')
Plot('lbb55',None,
	'''
	box x0=4.7 y0=6.5 label="Reflection" xt=1 yt=0.5 length=3 
	''')
Plot('lbb6',None,
	'''
	box x0=4.5 y0=4.5 label="" xt=1 yt=0.5 length=0.5 
	''')
Plot('lbb7',None,
	'''
	box x0=4.3 y0=3.5 label="" xt=1 yt=0.5 length=0.5 
	''')
Plot('lbb8',None,
	'''
	box x0=4.1 y0=2.5 label="" xt=2 yt=1 length=0.5 
	''')

Plot('lb4',None,
	'''
	box x0=5.1 y0=7.2 label="" xt=1 yt=0.5 length=0.5 
	''')
Plot('lb5',None,
	'''
	box x0=4.9 y0=6.5 label="" xt=1 yt=0.5 length=0.5 
	''')
Plot('lb6',None,
	'''
	box x0=4.7 y0=4.5 label="" xt=1 yt=0.5 length=0.5 
	''')
Plot('lb66',None,
	'''
	box x0=4.5 y0=4.5 label="Consistent with reflection image" xt=1 yt=0.5 length=3 
	''')
Plot('lb666',None,
	'''
	box x0=7.4 y0=5.0 label="Higher resolution" xt=1 yt=0.5 length=2 
	''')
Plot('lb7',None,
	'''
	box x0=4.5 y0=3.5 label="" xt=1 yt=0.5 length=0.5 
	''')
Plot('lb8',None,
	'''
	box x0=4.3 y0=2.5 label="" xt=2 yt=1 length=0.5 
	''')
Result('b-pwd-n-0','Fig/b-pwd-n.vpl lb1 lb2 lb3','Overlay')  
Result('b-lrr-n-0','Fig/b-lrr-n.vpl lb11 lb22 lb33','Overlay')  
Result('b-lrra-n-0','Fig/b-lrra-n.vpl lb11 lb22 lb33','Overlay')  

Result('b-pwd-n-t-0','Fig/b-pwd-n-t.vpl lbb4 lbb55 lbb6 lbb7 lbb8','Overlay')  
Result('b-lrr-n-t-0','Fig/b-lrr-n-t.vpl lbb4 lbb5 lbb6 lbb7 lbb8','Overlay')  
Result('b-lrra-n-t-0','Fig/b-lrra-n-t.vpl lbb4 lbb5 lbb6 lbb7 lbb8','Overlay') 

Result('b-pwd-rimag-0','Fig/b-pwd-rimag.vpl lb4 lb5 lb6 lb7 lb8','Overlay')  
Result('b-pwd-imag-0','Fig/b-pwd-imag.vpl lb4 lb5 lb66 lb7 lb8','Overlay')  
Result('b-lrr-imag-0','Fig/b-lrr-imag.vpl lb4 lb5 lb6 lb7 lb8','Overlay')  
Result('b-lrra-imag-0','Fig/b-lrra-imag.vpl lb4 lb5 lb6 lb666 lb7 lb8','Overlay')  

End()
