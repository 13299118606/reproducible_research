from rsf.proj import *
#google drive: https://drive.google.com/file/d/1hmLi3m7Q5XUvUOUJn9T5itNt0vI-1lWc/view?usp=sharing
#baidu: link:https://pan.baidu.com/s/1i2yvC6LneekxGTCjSQmMzw  pass:p6tr

def radius2(high, low,               # initial high-resolution and legacy images
            niter,                   # number of corrections
            c,                       # step length for radius corrections. Can be type int or float for constant c 
                                     #      or type array for changing c.
            bias=-15, clip=30,       # bias and clip for display
            rect1=40, rect2=80,      # radius for local frequency calculation
            maxrad=1000,             # maximum allowed radius
            theor=True,              # use theoretical smoothing radius
            scale=9,                 # scale for theoretical smoothing radius
            initial=10,              # initial value for contant smoothing radius 
            minval=0, maxval=25,     # minval and maxval for freqdif-filt display
            titlehigh="Hires",       # high title
            titlelow="Legacy",       # low title
            it=0):                   # correction number (from newarp.py)

    if type(c) is float or type(c) is int:
        c = [c]*niter

    def seisplot(name):
        return 'grey title="%s" screenratio=1.2'%name
    
    locfreq = '''iphase order=10 rect1=%d rect2=%d hertz=y complex=y | 
                 put label="Frequency" unit=Hz'''%(rect1,rect2)

    def locfreqplot(name):
        return 'grey mean=y color=j scalebar=y title="%s" screenratio=1.2'%name

    freqdif = 'add scale=-1,1 ${SOURCES[1]} | put label=Frequency'

    def freqdifplot(num):
        #return '''grey allpos=y color=j scalebar=y mean=y title="Difference in Local Frequencies %d" ''' %num
        #return '''grey allpos=y color=j scalebar=y mean=y title="Difference in Local Frequencies %d" 
        #          clip=%d bias=%d minval=%d maxval=%d''' %(num,clip,bias,minval,maxval) 
        return '''grey allpos=y color=j scalebar=y mean=y title="Difference in Local Frequencies %d" 
                  clip=%d bias=%d minval=%d maxval=%d screenratio=1.2''' %(num,22,-15,-15,8) 

    specplot = '''cat axis=2 ${SOURCES[1]} | 
                  scale axis=1 | window max1=125 |
                  graph title="Normalized Spectra" label2="Amplitude" unit2=""'''

    def rectplot(name):
        return 'grey color=j mean=y title="%s" scalebar=y barlabel=Radius barunit=samples screenratio=1.2'%name

    smooth = 'nsmooth1 rect=${SOURCES[1]}'

    #Result(high, seisplot(titlehigh))
    #Result(low, seisplot(titlelow))

    Flow('high-freq%i'%it,high,locfreq)
    Result('high-freq%i'%it,locfreqplot('%s Local Frequency'%titlehigh))

    Flow('low-freq%i'%it,low,locfreq)
    Result('low-freq%i'%it,locfreqplot('%s Local Frequency'%titlelow))

    Flow('freqdif%i'%it,'low-freq%i high-freq%i'%(it,it),freqdif)

    Result('freqdif%i'%it,freqdifplot(-1))

    # initial smoothing radius
    if (theor):
        from math import pi
        Flow('rect0%i'%it,'low-freq%i high-freq%i'%(it,it),'''math f1=${SOURCES[1]} 
              output="sqrt(%g*(1/(input*input)-1/(f1*f1)))/%g" '''%(scale,2*pi*0.001))
    else:
        Flow('rect0%i'%it,'low-freq%i'%it,'math output=%f'%initial)

    Result('rect0%i'%it,rectplot("Smoothing Radius 0"))

    Flow('high-smooth0%i'%it,'%s rect0%i'% (high,it),smooth)
    Result('high-smooth0%i'%it, seisplot("%s Smooth 0"%titlehigh))

    Flow('high-spec%i'%it,high,'spectra all=y')
    Flow('low-spec%i'%it,low,'spectra all=y')
    Flow('high-smooth-spec0%i'%it,'high-smooth0%i'%it,'spectra all=y')
    Result('nspectra%i'%it,'high-spec%i low-spec%i'%(it,it),specplot)
    Result('high-smooth-spec0%i'%it,'high-smooth-spec0%i low-spec%i'%(it,it),specplot)
    
    Flow('high-smooth-freq0%i'%it,'high-smooth0%i'%it,locfreq)
    Result('high-smooth-freq0%i'%it,locfreqplot("%s Local Frequency Smoothed %d" %(titlehigh,0)))
           
    Flow('freqdif-filt0%i'%it,'low-freq%i high-smooth-freq0%i'%(it,it),freqdif) 
    Result('freqdif-filt0%i'%it,freqdifplot(0)) 

    #prog=Program('radius2.c') 
    for i in range(1, niter+1): 
        j = i-1
        Flow('rect%d%i rect-low%d%i rect-high%d%i'%(i,it,i,it,i,it),'rect%d%i freqdif-filt%d%i'%(j,it,j,it),
             'radius2 freq=${SOURCES[1]} low=${TARGETS[1]} high=${TARGETS[2]} c=%f'%c[j])
        Result('rect%d%i'%(i,it),rectplot("Smoothing Radius %d")%i)
        Result('rect-low%d%i'%(i,it),rectplot("Smoothing Radius %d low")%i)
        Result('rect-high%d%i'%(i,it),rectplot("Smoothing Radius %d high")%i)
        
        Flow('high-smooth%d%i'%(i,it),'%s rect-high%d%i'%(high,i,it),smooth)
        Result('high-smooth%d%i'%(i,it), seisplot('%s Smooth %d'%(titlehigh,i)))

        Flow('low-smooth%d%i'%(i,it),'%s rect-low%d%i'%(low,i,it),smooth)
        Result('low-smooth%d%i'%(i,it), seisplot('%s Smooth %d'%(titlelow,i)))

        Flow('high-smooth-spec%d%i'%(i,it),'high-smooth%d%i'%(i,it),'spectra all=y')
        Flow('low-smooth-spec%d%i'%(i,it),'low-smooth%d%i'%(i,it),'spectra all=y')
        Result('high-smooth-spec%d%i'%(i,it),'high-smooth-spec%d%i low-smooth-spec%d%i'%(i,it,i,it),specplot)
        
        Flow('high-smooth-freq%d%i'%(i,it),'high-smooth%d%i'%(i,it),locfreq)
        Result('high-smooth-freq%d%i'%(i,it),locfreqplot('%s Local Frequency Smoothed %d'%(titlehigh,i)))

        Flow('low-smooth-freq%d%i'%(i,it),'low-smooth%d%i'%(i,it),locfreq)
        Result('low-smooth-freq%d%i'%(i,it),locfreqplot('%s Local Frequency Smoothed %d'%(titlelow,i)))

        Flow('freqdif-filt%d%i'%(i,it),'low-smooth-freq%d%i high-smooth-freq%d%i'%(i,it,i,it),freqdif)
        Result('freqdif-filt%d%i'%(i,it),freqdifplot(i))



def Wiggle(data,other): 
	Result(data,'''
				window j2=2 | wiggle transp=y yreverse=y 
				label2=Trace unit2="" label1=Time unit1="s" 
				title="" wherexlabel=b wheretitle=t poly=y 
				wheretitle=b wherexlabel=b %s clip=0.38 '''%other)

def Grey(data,other): 
	Result(data,'''
				grey transp=y yreverse=y 
				label2=Trace unit2="" label1=Time unit1="s" 
				title="" wherexlabel=b wheretitle=t poly=y color=g
				wheretitle=b wanttitle=n wherexlabel=b %s clip=0.38 '''%other)

def Greyr(data,data1,other): 
	Result(data,data1,'''
				grey transp=y yreverse=y 
				label2=Trace unit2="" label1=Time unit1="s" 
				title="" wherexlabel=b wheretitle=t poly=y color=g
				wheretitle=b wanttitle=n wherexlabel=b %s mean=y scalebar=y barlabel=Radius barunit=samples '''%other)


Flow('pp','bend_l1_pmig_enhanc.sgy',
         'segyread tape=$SOURCE read=data | window n2=471 | scale axis=2 | put label2=Trace',
         stdin=0)

## fxdecon
Flow('pp-fx','pp','fxdecon n2w=471')
Flow('pp-fx-n','pp-fx pp','add scale=-1,1 ${SOURCES[1]}')

## Similarity
Flow('pp-s','pp-fx-n pp-fx','similarity other=${SOURCES[1]} niter=20 rect1=5 rect2=5')


# ortho
Flow('pp-ortho-n pp-ortho','pp-fx-n pp-fx','ortho rect1=2 rect2=2 sig=${SOURCES[1]} sig2=${TARGETS[1]}')
Flow('pp-s-ortho','pp-ortho-n pp-ortho','similarity other=${SOURCES[1]} niter=20 rect1=5 rect2=5')


# non-stationary ortho
Flow('pp-high','pp','cp')
Flow('pp-low','pp','bandpass fhi=40')
#Flow('pp-low','pp-fx','cp')
Grey('pp-high','')
Grey('pp-low','')

# Flow('pp-high','pp-fx','cp | noise var=0.05 seed=202021')
# Flow('pp-low','pp-high','bandpass fhi=20')
# Grey('pp-high','')
# Grey('pp-low','')
#sfpen Fig/high-smooth-spec00.vpl Fig/high-smooth-spec10.vpl Fig/high-smooth-spec20.vpl Fig/high-smooth-spec30.vpl Fig/high-smooth-spec40.vpl Fig/high-smooth-spec50.vpl

radius2('pp-high','pp-low', 
                niter=5, 
#                 c=[0.7,0.45,0.35,0.35,0.5], #works fine
                c=[0.7,0.4,0.2,0.1,0.05], #works fine
                bias=-20, clip=30, 
                rect1=30, rect2=20, 
                theor=False, initial=1, 
                minval=-20, maxval=20, 
                titlehigh='High', titlelow='Low',
                it=0 )
                
Flow('rect1','rect50','math output="input"')
Flow('rect2','rect50','math output="input"')

Greyr('pp-rect10','rect10','color=j scalebar=y')
Greyr('pp-rect20','rect20','color=j scalebar=y')
Greyr('pp-rect30','rect30','color=j scalebar=y')
Greyr('pp-rect40','rect40','color=j scalebar=y')
Greyr('pp-rect50','rect50','color=j scalebar=y')


Flow('pp-orthon-n pp-orthon','pp-fx-n pp-fx rect1 rect2','orthon niter=100 sig=${SOURCES[1]} sig2=${TARGETS[1]} rect1=${SOURCES[2]} rect2=${SOURCES[3]} eps=0.00')
Grey('pp-orthon','')
Grey('pp-orthon-n','')


## ploting
Grey('pp','')
Grey('pp-fx','')
Grey('pp-ortho','')
Grey('pp-fx-n','')
Grey('pp-ortho-n','')

Grey('pp-s','color=j scalebar=y clip=0.8 minval=0 maxval=0.8')
Grey('pp-s-ortho','color=j scalebar=y clip=0.8 minval=0 maxval=0.8')



## Creating framebox
x=1300
y=1.7
w=250
w1=0.5

Flow('frame1.asc',None,'echo %s n1=10 data_format=ascii_float in=$TARGET'% \
	" ".join(map(str,(x,y,x+w,y,x+w,y+w1,x,y+w1,x,y))))
Plot('frame1','frame1.asc',
	'''
	dd type=complex form=native |
	graph min1=0 max1=2000 min2=0 max2=5 pad=n plotfat=15 plotcol=4 
	wantaxis=n wanttitle=n yreverse=y scalebar=n
	''')

# Result('pp-fx-n0','Fig/pp-fx-n.vpl frame1','Overlay')
# Result('pp-ortho-n0','Fig/pp-ortho-n.vpl frame1','Overlay')
# Result('pp-orthon-n0','Fig/pp-orthon-n.vpl frame1','Overlay')
Result('pp-fx-n0','Fig/pp-fx-n.vpl frame1 frame2 frame3','Overlay')
Result('pp-ortho-n0','Fig/pp-ortho-n.vpl frame1 frame2 frame3','Overlay')
Result('pp-orthon-n0','Fig/pp-orthon-n.vpl frame1 frame2 frame3','Overlay')

## Creating framebox B
x=150
y=0.25
w=100
w1=0.5

Flow('frame2.asc',None,'echo %s n1=10 data_format=ascii_float in=$TARGET'% \
	" ".join(map(str,(x,y,x+w,y,x+w,y+w1,x,y+w1,x,y))))
Plot('frame2','frame2.asc',
	'''
	dd type=complex form=native |
	graph min1=0 max1=470 min2=0 max2=2.046 pad=n plotfat=15 plotcol=2 
	wantaxis=n wanttitle=n yreverse=y scalebar=n
	''')

Flow('pp-z','pp','window min1=%g max1=%g min2=%g max2=%g'%(y,y+w1,x,x+w))
Flow('pp-fx-z','pp-fx','window min1=%g max1=%g min2=%g max2=%g'%(y,y+w1,x,x+w))
Flow('pp-ortho-z','pp-ortho','window min1=%g max1=%g min2=%g max2=%g'%(y,y+w1,x,x+w))
Flow('pp-orthon-z','pp-orthon','window min1=%g max1=%g min2=%g max2=%g'%(y,y+w1,x,x+w))
Grey('pp-z','')
Grey('pp-fx-z','')
Grey('pp-ortho-z','')
Grey('pp-orthon-z','')

Flow('pp-fx-n-z','pp-fx-n','window min1=%g max1=%g min2=%g max2=%g'%(y,y+w1,x,x+w))
Flow('pp-ortho-n-z','pp-ortho-n','window min1=%g max1=%g min2=%g max2=%g'%(y,y+w1,x,x+w))
Flow('pp-orthon-n-z','pp-orthon-n','window min1=%g max1=%g min2=%g max2=%g'%(y,y+w1,x,x+w))
Grey('pp-fx-n-z','clip=0.5')
Grey('pp-ortho-n-z','clip=0.5')
Grey('pp-orthon-n-z','clip=0.5')


## Creating framebox C
x=275
y=1.2
w=100
w1=0.5

Flow('frame3.asc',None,'echo %s n1=10 data_format=ascii_float in=$TARGET'% \
	" ".join(map(str,(x,y,x+w,y,x+w,y+w1,x,y+w1,x,y))))
Plot('frame3','frame3.asc',
	'''
	dd type=complex form=native |
	graph min1=0 max1=470 min2=0 max2=2.046 pad=n plotfat=15 plotcol=3 
	wantaxis=n wanttitle=n yreverse=y scalebar=n
	''')
	
Flow('pp-z1','pp','window min1=%g max1=%g min2=%g max2=%g'%(y,y+w1,x,x+w))
Flow('pp-fx-z1','pp-fx','window min1=%g max1=%g min2=%g max2=%g'%(y,y+w1,x,x+w))
Flow('pp-ortho-z1','pp-ortho','window min1=%g max1=%g min2=%g max2=%g'%(y,y+w1,x,x+w))
Flow('pp-orthon-z1','pp-orthon','window min1=%g max1=%g min2=%g max2=%g'%(y,y+w1,x,x+w))
Grey('pp-z1','')
Grey('pp-fx-z1','')
Grey('pp-ortho-z1','')
Grey('pp-orthon-z1','')

Result('pp-0','Fig/pp.vpl frame2 frame3','Overlay')
Result('pp-fx-0','Fig/pp-fx.vpl frame2 frame3','Overlay')
Result('pp-ortho-0','Fig/pp-ortho.vpl frame2 frame3','Overlay')
Result('pp-orthon-0','Fig/pp-orthon.vpl frame2 frame3','Overlay')	

Flow('pp-fx-n-z1','pp-fx-n','window min1=%g max1=%g min2=%g max2=%g'%(y,y+w1,x,x+w))
Flow('pp-ortho-n-z1','pp-ortho-n','window min1=%g max1=%g min2=%g max2=%g'%(y,y+w1,x,x+w))
Flow('pp-orthon-n-z1','pp-orthon-n','window min1=%g max1=%g min2=%g max2=%g'%(y,y+w1,x,x+w))

Grey('pp-fx-n-z1','clip=0.2')
Grey('pp-ortho-n-z1','clip=0.2')
Grey('pp-orthon-n-z1','clip=0.2')



#labelnew
Plot('labelnew0',None,
	'''
	box x0=7.2 y0=3.8 label="" xt=0 yt=-0.5 length=1.5 
	''')
Plot('labelnew00',None,
	'''
	box x0=4.2 y0=3.8 label="" xt=0 yt=-0.5 length=1.5 
	''')
Plot('labelnew000',None,
	'''
	box x0=10.2 y0=3.8 label="" xt=0 yt=-0.5 length=1.5 
	''')

Plot('labelnew2',None,
	'''
	box x0=7.2 y0=3.8 label="Weaker" xt=0 yt=-0.5 length=1.5 
	''')
Plot('labelnew22',None,
	'''
	box x0=4.2 y0=3.8 label="Weaker" xt=0 yt=-0.5 length=1.5 
	''')
Plot('labelnew222',None,
	'''
	box x0=10.2 y0=3.8 label="Weaker" xt=0 yt=-0.5 length=1.5 
	''')

Plot('labelnew3',None,
	'''
	box x0=7.2 y0=3.8 label="Stronger" xt=0 yt=-0.5 length=1.5 
	''')
Plot('labelnew33',None,
	'''
	box x0=4.2 y0=3.8 label="Stronger" xt=0 yt=-0.5 length=1.5 
	''')
Plot('labelnew333',None,
	'''
	box x0=10.2 y0=3.8 label="Stronger" xt=0 yt=-0.5 length=1.5 
	''')
		
	
Plot('labelnew1',None,
	'''
	box x0=7.2 y0=3.8 label="Noisier" xt=0 yt=-0.5 length=1.5 
	''')
Plot('labelnew10',None,
	'''
	box x0=4.2 y0=3.8 label="Noisier" xt=0 yt=-0.5 length=1.5 
	''')
Plot('labelnew100',None,
	'''
	box x0=10.2 y0=3.8 label="Noisier" xt=0 yt=-0.5 length=1.5 
	''')
Plot('labelnew11',None,
	'''
	box x0=7.2 y0=3.8 label="Cleaner" xt=0 yt=-0.5 length=1.5 
	''')
Plot('labelnew110',None,
	'''
	box x0=4.2 y0=3.8 label="Cleaner" xt=0 yt=-0.5 length=1.5 
	''')
Plot('labelnew1100',None,
	'''
	box x0=10.2 y0=3.8 label="Cleaner" xt=0 yt=-0.5 length=1.5 
	''')

# Plot('labelnew2',None,
# 	'''
# 	box x0=6.2 y0=6.8 label="Noisier" xt=-0.5 yt=-0.5 length=2.5 
# 	''')
# Plot('labelnew2',None,
# 	'''
# 	box x0=6.2 y0=6.8 label="Cleaner" xt=-0.5 yt=-0.5 length=2.5 
# 	''')	

Result('pp-fx-z10','Fig/pp-fx-z1.vpl labelnew2 labelnew22 labelnew222','Overlay')
Result('pp-ortho-z10','Fig/pp-ortho-z1.vpl labelnew0 labelnew00 labelnew000','Overlay')
Result('pp-orthon-z10','Fig/pp-orthon-z1.vpl labelnew3 labelnew33 labelnew333','Overlay')

Result('pp-fx-z0','Fig/pp-fx-z.vpl labelnew0 labelnew00 labelnew000','Overlay')
Result('pp-ortho-z0','Fig/pp-ortho-z.vpl labelnew1 labelnew10 labelnew100','Overlay')
Result('pp-orthon-z0','Fig/pp-orthon-z.vpl labelnew11 labelnew110 labelnew1100','Overlay')



End()
