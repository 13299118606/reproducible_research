from rsf.proj import *

#seis-time1:  	image of time 1
#seis-time2:  	image of time 2
#bot-time1: 	bottom image of time 1
#bot-time2: 	bottom image of time 2

n1=400
def Greyr(data,other):
	Result(data,
       '''
       byte allpos=y bar=bar.rsf|
       grey3 flat=n frame1=%d frame2=50 frame3=49 
       color=j wanttitle=n
       label1=Time unit1=s
       label2="Relative stretch" 
       label3=Trace barlabel="Smoothing radius" barunit=
       parallel2=n font=2  scalebar=y %s
       ''' % (600-n1,other)) #format2="%%3.1f"

def Greys(data,clip,other):
	Result(data,
       '''
       byte allpos=y clip=1.8 clip=%g bias=1.0 bar=bar.rsf|
       grey3 flat=n frame1=%d frame2=50 frame3=49
       color=j wanttitle=n
       label1=Time unit1=s
       label2="Relative stretch"
       label3=Trace barlabel="Energy" barunit=
       parallel2=n font=2 format2="%%3.1f" scalebar=y %s
       maxval=0 minval=2.5
       ''' % (clip,560-n1,other))
 
def Greys2(data,minv,maxv,clip,other):
	#just to make the scalebar appear the same
	Result(data,
       '''
       math output="(input-%g)"| scale axis=3 |math output="input*10"|sfclip2 lower=0.0000001|byte allpos=y clip=2.5 clip=%g bias=0.0 bar=bar.rsf|
       grey3 flat=n frame1=%d frame2=50 frame3=49
       color=j wanttitle=n
       label1=Time unit1=s
       label2="Relative stretch"
       label3=Trace barlabel="Energy" barunit=
       parallel2=n font=2 format2="%%3.1f" scalebar=y %s
       maxval=2.5 minval=0
       ''' % (minv,clip,560-n1,other))


def Graph(data,other):
	Result(data,'graph label1="Time" label2="Amplitude" unit2= unit1="s" labelsz=10 labelfat=4 font=2 titlesz=10 titlefat=4 title="" wherexlabel=b wheretitle=t screenratio=0.5 %s' %other)
	          
# Vs and density
Flow('vs','time1','math output=0')
Flow('rho','time1','math output=1')

g0=0.98  # starting change 
g1=2-g0  # last change
ng=101   # number of changes to scan
dg = (g1-g0)/(ng-1)
niter = 100 # number of iterations
rect1 = 25 # vertical smoothing

# time sampling
dt = 0.002
nt = int(1.75/dt+1.5)

# anisotropy for picking
an = 1000

Fetch('vel_time1.rsf','long')
Fetch('vel_time2.rsf','long')

Flow('time1','vel_time1',
     '''
         dd form=native |
         window f2=1 |
         put label=Velocity unit=km/s label1=Depth unit1=km
         ''')
Flow('time2','vel_time2',
     '''
         dd form=native |
         window f2=1 |
         put label=Velocity unit=km/s label1=Depth unit1=km
         ''')

Result('time1',
           '''
           grey color=j allpos=y bias=1.5
           scalebar=y label2=Trace wanttitle=n
           barreverse=y parallel2=n font=2 format2="%3.1f"
           ''')
Result('time2',
           '''
           grey color=j allpos=y bias=1.5
           scalebar=y label2=Trace wanttitle=n
           barreverse=y parallel2=n font=2 format2="%3.1f"
           ''')  
        
# model seismic (+ Gaussian random noise)
Flow('seis-time1',['time1','vs','rho'],
         '''
         cat axis=3 ${SOURCES[1:3]} |
         transp plane=23 |
         modrefl2 dt=%g nt=%d |
         window n2=1 |
         ricker1 frequency=30 |
         noise seed=%d var=5e-6
         ''' % (dt,nt,10*0))
Flow('seis-time1-c',['time1','vs','rho'],
         '''
         cat axis=3 ${SOURCES[1:3]} |
         transp plane=23 |
         modrefl2 dt=%g nt=%d |
         window n2=1 |
         ricker1 frequency=30 
         ''' % (dt,nt))
Flow('seis-time2',['time2','vs','rho'],
         '''
         cat axis=3 ${SOURCES[1:3]} |
         transp plane=23 |
         modrefl2 dt=%g nt=%d |
         window n2=1 |
         ricker1 frequency=30 |
         noise seed=%d var=5e-6
         ''' % (dt,nt,10*1))
Flow('truth','../longc/truth.rsf','cp')
Flow('seis-time2-c',['time2','vs','rho'],
         '''
         cat axis=3 ${SOURCES[1:3]} |
         transp plane=23 |
         modrefl2 dt=%g nt=%d |
         window n2=1 |
         ricker1 frequency=30 
         ''' % (dt,nt))

Flow('trace1','seis-time1','window n2=1 f2=50')
Flow('trace2','seis-time2','window n2=1 f2=50')
Result('trace-comp','trace1 trace2','cat axis=2 ${SOURCES[1]} | graph label1="Time" label2="Amplitude" unit2= unit1="s" labelsz=10 labelfat=4 font=2 titlesz=10 titlefat=4 title="" wherexlabel=b wheretitle=t screenratio=0.5')

Flow('h-diff2','seis-time2-c seis-time2','add scale=1,-1 ${SOURCES[1]} ')
Flow('h-snr2','seis-time2-c h-diff2','snr2 noise=${SOURCES[1]}')

Flow('h-diff1','seis-time1-c seis-time1','add scale=1,-1 ${SOURCES[1]} ')
Flow('h-snr1','seis-time1-c h-diff1','snr2 noise=${SOURCES[1]}')

Result('seis-time1','grey color=g label2=Trace label1=Time unit1=s wanttitle=n parallel2=n font=2 format2="%3.1f"')
Result('seis-time2','grey color=g label2=Trace label1=Time unit1=s wanttitle=n parallel2=n font=2 format2="%3.1f"')

Flow('trace-time1','seis-time1','window n2=1 f2=50')
Flow('trace-time2','seis-time2','window n2=1 f2=50')


Flow('mdif-time2',['time2','time1'],'add scale=1,-1 ${SOURCES[1]}')
Result('mdif-time2',
               '''
               grey color=j 
               scalebar=y label2=Trace wanttitle=n
               barreverse=y barlabel="Velocity Change" minval=0
               parallel2=n font=2 format2="%3.1f" formatbar="%3.2f"
               ''')
               
# Analyze one trace (begin with t)
# Take time-lapse difference
Flow('tdif-time2',['trace-time2','trace-time1'],'add scale=1,-1 ${SOURCES[1]}')

Result('tdif-time2',['trace-time1','trace-time2','tdif-time2'],
               '''
               cat axis=2 ${SOURCES[1:3]} |
               dots labels=Before:After:Difference label1=Time unit1=s
               yreverse=y gaineach=n 
               ''')

# Separate bottom part
Flow('tbot-time2','trace-time2','window f1=%d' % n1)
Flow('tbot0-time2','trace-time1','window f1=%d' % n1)
Flow('ttop0-time2','trace-time2','window n1=%d' % n1)

# Scan shifts computing local similarity
Flow('tscan-time2',['tbot-time2','tbot0-time2'],
     '''
     warpscan other=${SOURCES[1]} niter=%d
     ng=%d g0=%g dg=%g rect1=%d | 
     math output='(1+input)^4'
     ''' % (niter,ng,g0,dg,rect1))

Plot('tscan-time2',
     '''
     grey allpos=y
     color=j wanttitle=n
     label1=Time unit1=s
     label2="Relative stretch"
     ''')

# Pick the stretch
Flow('tpick-time2','tscan-time2','pick rect1=%d vel0=1 | window' % rect1)
Plot('tpick-time2',
     '''
     graph transp=y min2=%g max2=%g 
     yreverse=y plotcol=7 plotfat=5 
     wantaxis=n wanttitle=n pad=n
     ''' % (g0,g1))
Result('tscan-time2',['tscan-time2','tpick-time2'],'Overlay')

# Convert stretch to shift
Flow('tshift-time2','tpick-time2','math output="(input-1)*x1" ')


# Smooth pick
Flow('tpicks-time2','tscan-time2',
     '''
     pick rect1=%d vel0=1 an=%d |
     window''' % (10*rect1,an))

# Interval velocity ratio
Flow('trat-time2',['ttop0-time2','tpicks-time2'],
     '''
     math output=1 |
     cat axis=1 ${SOURCES[1]} |
     math output="input*x1" |
     smoothder eps=10
     ''')

# Apply the stretch
Flow('twarp-time2',['tbot-time2','tbot0-time2','tshift-time2'],
     '''
     warp1 other=${SOURCES[1]} warpin=${SOURCES[2]}
     verb=1 nliter=0 
     ''')

Flow('twarp2-time2',['ttop0-time2','twarp-time2'],'cat axis=1 ${SOURCES[1]}')

# Take time-lapse difference
Flow('tdif1-time2',['twarp2-time2','trace-time1'],'add scale=1,-1 ${SOURCES[1]}')
Result('tdif1-time2',['trace-time1','twarp2-time2','tdif1-time2'],
       '''
       cat axis=2 ${SOURCES[1:3]} |
       dots labels=Before:After:Difference label1=Time unit1=s
       yreverse=y gaineach=n 
       ''')


######################################
# 2-D work
######################################
# Take time-lapse difference
Flow('dif-time2',['seis-time2','seis-time1'],'add scale=1,-1 ${SOURCES[1]}')

Result('dif-time2',
       'grey color=g label2=Trace label1=Time unit1=s wanttitle=n parallel2=n font=2 format2="%3.1f"')

Flow('bot-time2','seis-time2','window f1=%d' % n1)

Flow('bot0-time2','seis-time1','window f1=%d' % n1)

Flow('top0-time2','seis-time2','window n1=%d' % n1)

Result('bot-time2',
       'grey label2=Trace label1=Time unit1=s wanttitle=n parallel2=n font=2 format2="%3.1f"')

Result('bot0-time2',
       'grey label2=Trace label1=Time unit1=s wanttitle=n parallel2=n font=2 format2="%3.1f"')


 ## smoothing parameters
r_max=30 
r_ref=10
rg_max=8
rg_ref=2
rx_max=12 
rx_ref=4

# Scan shifts computing local similarity
Flow('scan-time2',['bot-time2','bot0-time2'],
     '''
     warpscan other=${SOURCES[1]} niter=%d
     ng=%d g0=%g dg=%g rect1=%d rect2=%d rect3=%d | 
     math output='(1+input)^4'
     ''' % (niter,ng,g0,dg,r_max,rg_max,rx_max))
Flow('scan-time22',['bot-time2','bot0-time2'],
     '''
     warpscan other=${SOURCES[1]} niter=%d
     ng=%d g0=%g dg=%g rect1=%d rect2=%d rect3=%d | 
     math output='(1+input)^4'
     ''' % (niter,ng,g0,dg,4,2,4))


Flow('scan-time2-m',['bot-time2','bot0-time2'],
     '''
     warpscan other=${SOURCES[1]} niter=%d
     ng=%d g0=%g dg=%g rect1=%d rect2=%d rect3=%d | 
     math output='(1+input)^4'
     ''' % (niter,ng,g0,dg,r_ref,rg_ref,rx_ref))
     
# Pick the stretch
Flow('pick-time2','scan-time2',
     'pick rect1=%d rect2=3 gate=100 vel0=1 | window' % (rect1/2))

Result('pick-time2',['top0-time2','pick-time2'],
       '''
       math output=1 | cat axis=1 ${SOURCES[1]} |
       grey color=j scalebar=y wanttitle=n
       label1=Time unit1=s label2=Trace bias=1
       barlabel="Relative stretch" barunit=
       parallel2=n font=2 minval=0.98 maxval=1.02
       ''')#format2="%3.1f"

Flow('scan-time-test','scan-time2','window n3=1 f3=55')
Flow('pick-time-test','scan-time-test','pick rect1=%d rect2=3 gate=100 vel0=1 | window' % (rect1/2))
Plot('scan-time-test','math output="(input-1.25473)/1.56963*5" | grey color=j allpos=y clip=1.0 bias=0.0 min1=0.8 max1=1.75 min2=0.98 max2=1.02 wanttitle=n wherexlabel=t label2="Relative stretch" label1="Time" scalebar=y barlabel=Energy barunit= unit1=s maxval=1.0 minval=0.0')
Plot('pick-time-test','pick-time-test','graph transp=y min1=0.8 max1=1.75 min2=0.98 max2=1.02 wanttitle=n wherexlabel=t plotfat=12 yreverse=y wantaxis=n scalebar=y barlabel=Energy barunit= ')
Result('scan-time-test','scan-time-test pick-time-test','Overlay')

Flow('scan-time-test-n','scan-time2-n','window n3=1 f3=55')
Flow('pick-time-test-n','scan-time-test-n','pick rect1=%d rect2=3 gate=100 vel0=1 | window' % (rect1/2))
Plot('scan-time-test-n','math output="(input-1.18993)/2.67543*5" | grey color=j allpos=y clip=1.0 bias=0.0  min1=0.8 max1=1.75 min2=0.98 max2=1.02 wanttitle=n wherexlabel=t label2="Relative stretch" label1="Time" scalebar=y barlabel=Energy barunit=  unit1=s maxval=1.0 minval=0.0')
Plot('pick-time-test-n','pick-time-test-n','graph transp=y min1=0.8 max1=1.75 min2=0.98 max2=1.02 wanttitle=n wherexlabel=t plotfat=12 yreverse=y wantaxis=n scalebar=y barlabel=Energy barunit= ')
Result('scan-time-test-n','scan-time-test-n pick-time-test-n','Overlay')

# Convert stretch to shift
Flow('shift-time2','pick-time2','math output="(input-1)*x1" ')


# Apply the stretch
Flow('warp-time2',['bot-time2','bot0-time2','shift-time2'],
     '''
     warp1 other=${SOURCES[1]} warpin=${SOURCES[2]}
     verb=1 nliter=0 
     ''')

Flow('warp2-time2',['top0-time2','warp-time2'],'cat axis=1 ${SOURCES[1]}')
  
# display
Result('warp2-time2','grey label2=Trace label1=Time unit1=s wanttitle=n parallel2=n font=2 format2="%3.1f" ')

# Take time-lapse difference
Flow('dif2-time2',['warp2-time2','seis-time1'],'add scale=1,-1 ${SOURCES[1]}')

Result('dif2-time2',
       'grey color=g clip=0.005 label2=Trace label1=Time unit1=s wanttitle=n parallel2=n font=2 format2="%3.1f"')


## Following is from YC
# Flow('rect1','scan-time2','math output="input-1"|scale axis=3|dd type=float|math output="-%g*input+%g"'%(r_max-r_ref,r_max))
# Flow('rect2','scan-time2','math output="input-1"|scale axis=3|dd type=float|math output="-%g*input+%g"'%(rg_max-rg_ref,rg_max))
# Flow('rect3','scan-time2','math output="input-1"|scale axis=3|dd type=float|math output="-%g*input+%g"'%(rx_max-rx_ref,rx_max))
Flow('rect1','scan-time2','math output="input-1"|scale axis=3| mask min=0.25 |dd type=float|math output="-%g*input+%g"'%(r_max-r_ref,r_max))
Flow('rect2','scan-time2','math output="input-1"|scale axis=3| mask min=0.25|dd type=float|math output="-%g*input+%g"'%(rg_max-rg_ref,rg_max))
Flow('rect3','scan-time2','math output="input-1"|scale axis=3| mask min=0.25|dd type=float|math output="-%g*input+%g"'%(rx_max-rx_ref,rx_max))
Greyr('rect1','')
Greyr('rect2','')
Greyr('rect3','')

# Scan shifts computing local similarity
Flow('scan-time2-n',['bot-time2','bot0-time2','rect1','rect2','rect3'],
     '''
     warpscann other=${SOURCES[1]} mode=1 niter=%d 
     ng=%d g0=%g dg=%g rect1=${SOURCES[2]} rect2=${SOURCES[3]} rect3=${SOURCES[4]} |
     math output='(1+input)^4'
     ''' % (niter,ng,g0,dg))

# OPTION 2
Flow('rect11','scan-time2-m','math output="input-1"|scale axis=3|dd type=float|math output="-%g*input+%g"'%(r_max-r_ref,r_max))
Flow('rect22','scan-time2-m','math output="input-1"|scale axis=3|dd type=float|math output="-%g*input+%g"'%(rg_max-rg_ref,rg_max))
Flow('rect33','scan-time2-m','math output="input-1"|scale axis=3|dd type=float|math output="-%g*input+%g"'%(rx_max-rx_ref,rx_max))
Greyr('rect11','')
Greyr('rect22','')
Greyr('rect33','')

# Scan shifts computing local similarity
Flow('scan-time2-nm',['bot-time2','bot0-time2','rect11','rect22','rect33'],
     '''
     warpscann other=${SOURCES[1]} mode=1 niter=%d 
     ng=%d g0=%g dg=%g rect1=${SOURCES[2]} rect2=${SOURCES[3]} rect3=${SOURCES[4]} |
     math output='(1+input)^4'
     ''' % (niter,ng,g0,dg))
     
Greys2('scan-time2',1.24236,2.69152,2.0,'')
Greys2('scan-time22',1.0966,13.3135,2.0,'')
Greys('scan-time2-m',1.8,'')
Greys2('scan-time2-n',1.16261,7.97541,2.0,'')
Greys('scan-time2-nm',1.8,'')

# Pick the stretch
Flow('pick-time2-n','scan-time2-n',
     'pick rect1=%d rect2=3 gate=100 vel0=1 | window' % (rect1/2))

Result('pick-time2-n',['top0-time2','pick-time2-n'],
       '''
       math output=1 | cat axis=1 ${SOURCES[1]} |
       grey color=j scalebar=y wanttitle=n
       label1=Time unit1=s label2=Trace bias=1
       barlabel="Relative stretch" barunit=
       parallel2=n font=2  minval=0.98 maxval=1.02
       ''')#format2="%3.1f"

# Convert stretch to shift
Flow('shift-time2-n','pick-time2-n','math output="(input-1)*x1" ')


# Apply the stretch
Flow('warp-time2-n',['bot-time2','bot0-time2','shift-time2-n'],
     '''
     warp1 other=${SOURCES[1]} warpin=${SOURCES[2]}
     verb=1 nliter=0 
     ''')

Flow('warp2-time2-n',['top0-time2','warp-time2-n'],'cat axis=1 ${SOURCES[1]}')
  
# display
Result('warp2-time2-n','grey label2=Trace label1=Time unit1=s wanttitle=n parallel2=n font=2 format2="%3.1f" ')

# Take time-lapse difference
Flow('dif2-time2-n',['warp2-time2-n','seis-time1'],'add scale=1,-1 ${SOURCES[1]}')

Result('dif2-time2-n',
       'grey color=g clip=0.005 label2=Trace label1=Time unit1=s wanttitle=n parallel2=n font=2 format2="%3.1f"')


Result('comp','Fig/dif2-time2.vpl Fig/dif2-time2-n.vpl','SideBySideAniso');
Result('comp1','Fig/scan-time2.vpl Fig/scan-time2-n.vpl','SideBySideAniso');


Plot('label1',None,
	'''
	box x0=5.8 y0=2.8 label="Error" xt=-0.5 yt=0.1 length=1.5
	''')
Plot('label2',None,
	'''
	box x0=5.8 y0=3.6 label="" xt=-0.5 yt=-0.1 length=1.5
	''')
Plot('label11',None,
	'''
	box x0=5.8 y0=2.8 label="" xt=-0.5 yt=0.1 length=1.5
	''')

Result('long-dif','Fig/dif2-time2.vpl label1 label2','Overlay')
Result('long-dif-n','Fig/dif2-time2-n.vpl label11 label2','Overlay')

Result('comp-dif','Fig/long-dif.vpl Fig/long-dif-n.vpl','SideBySideAniso');


Flow('tmp1','warp2-time2-n','fxdecon')
Flow('tmp2','warp2-time2','fxdecon')
Flow('diff1','truth tmp1','add scale=1,-1 ${SOURCES[1]} |cut max1=1.15')
Flow('snr1','truth diff1','cut max1=1.15|snr2 noise=${SOURCES[1]}')

Flow('diff2','truth tmp2','add scale=1,-1 ${SOURCES[1]} |cut max1=1.15')
Flow('snr2','truth diff2','cut max1=1.15|snr2 noise=${SOURCES[1]}')

Result('diff1',
       'grey color=g label2=Trace label1=Time unit1=s wanttitle=n parallel2=n font=2 format2="%3.1f"')
Result('diff2',
       'grey color=g label2=Trace label1=Time unit1=s wanttitle=n parallel2=n font=2 format2="%3.1f"')
       
End()

